/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_knox_kismet_player_KismetPlayer */

#include "player/KismetPlayer.h"
#include "util/KisLog.h"

#include <android/native_window_jni.h>

#ifndef _Included_com_knox_kismet_player_KismetPlayer
#define _Included_com_knox_kismet_player_KismetPlayer
#ifdef __cplusplus
extern "C" {
#endif

#define LOG_TAG "JNI-KISMETPLAYER"

//------class---------------------------------------------------------------------------------------
struct fields_t {
    // 存储真正的player, native端的kismetplayer
    jfieldID context;
};

static fields_t gFields;
//------static method-------------------------------------------------------------------------------

static KismetPlayer *getKismetPlayer(JNIEnv *env, jobject thiz) {
    KismetPlayer *player = (KismetPlayer *) env->GetLongField(thiz, gFields.context);
//    KLOGE(LOG_TAG, "get-player [%p]", player);
    return player;
}

static void setKismetPlayer(JNIEnv *env, jobject thiz, const KismetPlayer *player) {
//    KLOGE(LOG_TAG, "set-player [%p]", player);
    KismetPlayer *old = getKismetPlayer(env, thiz);
    if (nullptr != old) {
        old->release();
        old = nullptr;
    }
    env->SetLongField(thiz, gFields.context, (jlong) player);
}

//------jni method----------------------------------------------------------------------------------

/*
 * Class:     com_knox_kismet_player_KismetPlayer
 * Method:    native_init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_knox_kismet_player_KismetPlayer_native_1init
        (JNIEnv *env, jclass clazz) {
    gFields.context = env->GetFieldID(clazz, "mNativePlayer", "J");
    if (gFields.context == NULL) {
        // TODO throw exception
        KLOGE(LOG_TAG, "gFields.context == NULL");
        return;
    }
}

/*
 * Class:     com_knox_kismet_player_KismetPlayer
 * Method:    native_setup
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_knox_kismet_player_KismetPlayer_native_1setup
        (JNIEnv *env, jobject thiz) {
    KismetPlayer *player = new KismetPlayer();
    player->init();
    setKismetPlayer(env, thiz, player);
}

/*
 * Class:     com_knox_kismet_player_KismetPlayer
 * Method:    native_setDataSource
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_knox_kismet_player_KismetPlayer_native_1setDataSource
        (JNIEnv *env, jobject thiz, jstring jpath) {
    KismetPlayer *player = getKismetPlayer(env, thiz);
    if (nullptr == player) {
        KLOGE(LOG_TAG, "can't get player in setDataSource");
        return;
    }
    const char *path = env->GetStringUTFChars(jpath, NULL);
    player->setDataSource(path);
}

/*
 * Class:     com_knox_kismet_player_KismetPlayer
 * Method:    native_setDisplay
 * Signature: (Ljava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_com_knox_kismet_player_KismetPlayer_native_1setDisplay
        (JNIEnv *env, jobject thiz, jobject surface) {
    KismetPlayer *player = getKismetPlayer(env, thiz);
    if (nullptr == player) {
        KLOGE(LOG_TAG, "can't get player in setDisplay");
        return;
    }
    player->setDisplay(ANativeWindow_fromSurface(env, surface));
}

/*
 * Class:     com_knox_kismet_player_KismetPlayer
 * Method:    native_prepare
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_knox_kismet_player_KismetPlayer_native_1prepare
        (JNIEnv *env, jobject thiz) {
    KismetPlayer *player = getKismetPlayer(env, thiz);
    if (nullptr == player) {
        KLOGE(LOG_TAG, "can't get player in prepare");
        return;
    }
    player->prepare();
}

/*
 * Class:     com_knox_kismet_player_KismetPlayer
 * Method:    native_prepareAsync
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_knox_kismet_player_KismetPlayer_native_1prepareAsync
        (JNIEnv *env, jobject thiz) {
    KismetPlayer *player = getKismetPlayer(env, thiz);
    if (nullptr == player) {
        KLOGE(LOG_TAG, "can't get player in prepareAsync");
        return;
    }
    player->prepareAsync();
}

/*
 * Class:     com_knox_kismet_player_KismetPlayer
 * Method:    native_start
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_knox_kismet_player_KismetPlayer_native_1start
        (JNIEnv *env, jobject thiz) {
    KismetPlayer *player = getKismetPlayer(env, thiz);
    if (nullptr == player) {
        KLOGE(LOG_TAG, "can't get player in start");
        return;
    }
    player->start();
}

/*
 * Class:     com_knox_kismet_player_KismetPlayer
 * Method:    native_stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_knox_kismet_player_KismetPlayer_native_1stop
        (JNIEnv *env, jobject thiz) {
    KismetPlayer *player = getKismetPlayer(env, thiz);
    if (nullptr == player) {
        KLOGE(LOG_TAG, "can't get player in stop");
        return;
    }
    player->stop();
}

/*
 * Class:     com_knox_kismet_player_KismetPlayer
 * Method:    native_pause
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_knox_kismet_player_KismetPlayer_native_1pause
        (JNIEnv *env, jobject thiz) {
    KismetPlayer *player = getKismetPlayer(env, thiz);
    if (nullptr == player) {
        KLOGE(LOG_TAG, "can't get player in pause");
        return;
    }
    player->pause();
}

/*
 * Class:     com_knox_kismet_player_KismetPlayer
 * Method:    native_reset
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_knox_kismet_player_KismetPlayer_native_1reset
        (JNIEnv *env, jobject thiz) {
    KismetPlayer *player = getKismetPlayer(env, thiz);
    if (nullptr == player) {
        KLOGE(LOG_TAG, "can't get player in reset");
        return;
    }
    player->reset();
}

/*
 * Class:     com_knox_kismet_player_KismetPlayer
 * Method:    native_release
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_knox_kismet_player_KismetPlayer_native_1release
        (JNIEnv *env, jobject thiz) {
    KismetPlayer *player = getKismetPlayer(env, thiz);
    if (nullptr == player) {
        KLOGE(LOG_TAG, "can't get player in release");
        return;
    }
    player->release();
}

//------dynamic register----------------------------------------------------------------------------

#ifdef __cplusplus
}
#endif
#endif
